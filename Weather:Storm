{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "HW1_part2.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "tET0JDf_uga0",
        "outputId": "ffacd679-0391-418d-d27d-d8fff47e730e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "\n",
        "project_id = 'hw1section2'\n",
        "from google.colab import auth\n",
        "auth.authenticate_user()\n",
        "print('Authenticated')\n",
        "\n"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Authenticated\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "K6MYO7EH5wou",
        "outputId": "8ebb28b4-35da-455e-ebf1-f88cd1716c78",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "import pandas as pd\n",
        "str2 = '1950'\n",
        "str1 = 'bigquery-public-data.noaa_historic_severe_storms.storms_ '\n",
        "### starting station\n",
        "\n",
        "sql10 = \"\"\"\n",
        "SELECT\n",
        "  event_type as EventType,\n",
        "  cz_name as CNAME,\n",
        "  event_id as Event_ID,\n",
        "  event_begin_time as BeginTime,\n",
        "FROM\n",
        "  `bigquery-public-data.noaa_historic_severe_storms.storms_*`\n",
        "WHERE\n",
        "  event_begin_time BETWEEN \"1950-1-1\" AND \"2000-12-31\"\n",
        "GROUP BY\n",
        "  EventType,\n",
        "  Event_ID,\n",
        "  CNAME,\n",
        "  BeginTime\n",
        "ORDER BY\n",
        "  BeginTime DESC\n",
        "\"\"\"\n",
        "\n",
        "Start = pd.io.gbq.read_gbq(sql10, project_id='hw1section2', dialect='standard')\n",
        "print(Start)\n",
        "Start.to_csv('data.csv')\n",
        "\n",
        "Events40 = Start['EventType'].value_counts().rename_axis('Type').reset_index(name='No: times')\n",
        "print(Events40)\n",
        "\n",
        "\n",
        "select_Decades = Start[Start['BeginTime'] == '2000']\n",
        "select_Decades = select_Decades[select_Decades['EventType'] == 'tornado']\n",
        "\n",
        "select_Decades1 = Start[Start['BeginTime'] == '1990']\n",
        "select_Decades1 = select_Decades1[select_Decades1['EventType'] == 'tornado']\n",
        "\n",
        "select_Decades2 = Start[Start['BeginTime'] == '1980']\n",
        "select_Decades2 = select_Decades2[select_Decades2['EventType'] == 'tornado']\n",
        "\n",
        "select_Decades3 = Start[Start['BeginTime'] == '1970']\n",
        "select_Decades3 = select_Decades3[select_Decades3['EventType'] == 'tornado']\n",
        "\n",
        "select_Decades4 = Start[Start['BeginTime'] == '1960']\n",
        "select_Decades4 = select_Decades4[select_Decades4['EventType'] == 'tornado']\n",
        "\n",
        "select_Decades5 = Start[Start['BeginTime'] == '1950']\n",
        "select_Decades5 = select_Decades5[select_Decades5['EventType'] == 'tornado']\n",
        "\n",
        "\n",
        "bigdata = select_Decades.append(select_Decades1, ignore_index=True)\n",
        "bigdata = bigdata.append(select_Decades2, ignore_index=True)\n",
        "bigdata = bigdata.append(select_Decades3, ignore_index=True)\n",
        "bigdata = bigdata.append(select_Decades4, ignore_index=True)\n",
        "bigdata = bigdata.append(select_Decades5, ignore_index=True)\n",
        "print (bigdata)\n",
        "bigdata.plot.bar()\n",
        "print(Start.dtypes)"
      ],
      "execution_count": 78,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "           EventType         CNAME  Event_ID           BeginTime\n",
            "0       winter storm     LIMESTONE   5167467 2000-12-31 00:00:00\n",
            "1       winter storm         LAMAR   5167464 2000-12-31 00:00:00\n",
            "2       winter storm  THROCKMORTON   5167593 2000-12-31 00:00:00\n",
            "3       winter storm     ROBERTSON   5167476 2000-12-31 00:00:00\n",
            "4       winter storm          JACK   5169181 2000-12-31 00:00:00\n",
            "...              ...           ...       ...                 ...\n",
            "472051       tornado          POLK   9981922 1950-01-13 05:25:00\n",
            "472052       tornado      VAN WERT  10086808 1950-01-03 16:00:00\n",
            "472053       tornado    MONTGOMERY  10009711 1950-01-03 11:55:00\n",
            "472054       tornado       MADISON  10009710 1950-01-03 11:10:00\n",
            "472055       tornado     ST. LOUIS  10063615 1950-01-03 11:00:00\n",
            "\n",
            "[472056 rows x 4 columns]\n",
            "                              Type  No: times\n",
            "0                thunderstorm wind     159014\n",
            "1                             hail     126195\n",
            "2                          tornado      42985\n",
            "3                       heavy snow      16010\n",
            "4                      flash flood      15186\n",
            "5                     winter storm      15128\n",
            "6                        high wind      14537\n",
            "7                Thunderstorm Wind      10859\n",
            "8                            flood       9218\n",
            "9                             Hail       8370\n",
            "10                         drought       7932\n",
            "11                 cold/wind chill       5497\n",
            "12                            heat       5331\n",
            "13                       lightning       4430\n",
            "14                  winter weather       4161\n",
            "15                       ice storm       3898\n",
            "16                      heavy rain       3553\n",
            "17                        blizzard       3465\n",
            "18                     strong wind       3128\n",
            "19                       dense fog       2076\n",
            "20                    funnel cloud       1741\n",
            "21         extreme cold/wind chill       1713\n",
            "22                         Tornado       1217\n",
            "23                       high surf       1131\n",
            "24                      waterspout       1077\n",
            "25                        wildfire        882\n",
            "26             hurricane (typhoon)        710\n",
            "27                    frost/freeze        496\n",
            "28                   coastal flood        480\n",
            "29                  excessive heat        378\n",
            "30                  tropical storm        370\n",
            "31                     rip current        164\n",
            "32                           sleet        150\n",
            "33                lake-effect snow        135\n",
            "34                storm surge/tide        135\n",
            "35                       avalanche         80\n",
            "36                      dust storm         63\n",
            "37                     debris flow         48\n",
            "38                    freezing fog         37\n",
            "39                      dust devil         36\n",
            "40                          seiche         10\n",
            "41           astronomical low tide          5\n",
            "42                    volcanic ash          4\n",
            "43                marine high wind          3\n",
            "44        THUNDERSTORM WIND/ TREES          3\n",
            "45  THUNDERSTORM WINDS FUNNEL CLOU          2\n",
            "46    THUNDERSTORM WINDS LIGHTNING          2\n",
            "47       THUNDERSTORM WINDS/ FLOOD          2\n",
            "48     thunderstorm winds/flooding          1\n",
            "49      tornadoes, tstm wind, hail          1\n",
            "50              TORNADO/WATERSPOUT          1\n",
            "51   THUNDERSTORM WINDS/HEAVY RAIN          1\n",
            "52                  hail/icy roads          1\n",
            "53  THUNDERSTORM WINDS/FLASH FLOOD          1\n",
            "54                   HAIL FLOODING          1\n",
            "55         THUNDERSTORM WIND/ TREE          1\n",
            "56   THUNDERSTORM WINDS HEAVY RAIN          1\n",
            "Empty DataFrame\n",
            "Columns: [EventType, CNAME, Event_ID, BeginTime]\n",
            "Index: []\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "error",
          "ename": "IndexError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-78-f4b47cc86764>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     56\u001b[0m \u001b[0mbigdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbigdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mselect_Decades5\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mignore_index\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     57\u001b[0m \u001b[0mprint\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mbigdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 58\u001b[0;31m \u001b[0mbigdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     59\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mStart\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtypes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/plotting/_core.py\u001b[0m in \u001b[0;36mbar\u001b[0;34m(self, x, y, **kwargs)\u001b[0m\n\u001b[1;32m   1105\u001b[0m         \u001b[0mother\u001b[0m \u001b[0maxis\u001b[0m \u001b[0mrepresents\u001b[0m \u001b[0ma\u001b[0m \u001b[0mmeasured\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1106\u001b[0m         \"\"\"\n\u001b[0;32m-> 1107\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkind\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"bar\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1108\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1109\u001b[0m     @Appender(\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/plotting/_core.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    947\u001b[0m                     \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlabel_name\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    948\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 949\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mplot_backend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkind\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mkind\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    950\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    951\u001b[0m     \u001b[0m__call__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__doc__\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m__doc__\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/plotting/_matplotlib/__init__.py\u001b[0m in \u001b[0;36mplot\u001b[0;34m(data, kind, **kwargs)\u001b[0m\n\u001b[1;32m     59\u001b[0m             \u001b[0mkwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"ax\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"left_ax\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     60\u001b[0m     \u001b[0mplot_obj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mPLOT_CLASSES\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkind\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 61\u001b[0;31m     \u001b[0mplot_obj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgenerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     62\u001b[0m     \u001b[0mplot_obj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     63\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mplot_obj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/plotting/_matplotlib/core.py\u001b[0m in \u001b[0;36mgenerate\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    276\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0max\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxes\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    277\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_post_plot_logic_common\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 278\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_post_plot_logic\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    279\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    280\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_args_adjust\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/plotting/_matplotlib/core.py\u001b[0m in \u001b[0;36m_post_plot_logic\u001b[0;34m(self, ax, data)\u001b[0m\n\u001b[1;32m   1459\u001b[0m         \u001b[0mname\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_index_name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1460\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1461\u001b[0;31m         \u001b[0ms_edge\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0max_pos\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0;36m0.25\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlim_offset\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1462\u001b[0m         \u001b[0me_edge\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0max_pos\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m0.25\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbar_width\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlim_offset\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1463\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mIndexError\u001b[0m: index 0 is out of bounds for axis 0 with size 0"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zWdcjRWDRKcN"
      },
      "source": [
        "The top event type is thunderstorm wind\n",
        "it occurs 159014 times\n",
        "\n"
      ]
    }
  ]
}